
import Foundation
//
//  GitHubAPI.swift
//  Xgist
//
//  Created by Fernando Bunn on 27/03/17.
//  Copyright Â© 2017 Fernando Bunn. All rights reserved.
//

struct GitHubAPI {

    func post(gist: String, fileExtension: String, completion: @escaping (Error?, String?) -> Void) {
        var file = [String : Any]()
        file["content"] = gist
        
        var files = [String : Any]()
        files["Xgist.\(fileExtension)"] = file
        
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .medium
        let dateString = formatter.string(from: Date())
        
        var jsonDictionary = [String : Any]()
        jsonDictionary["description"] = "Generated by Xgist (https://github.com/Bunn/Xgist) at \(dateString)"
        jsonDictionary["public"] = false
        jsonDictionary["files"] = files
        
        guard let request = GitHubRouter.gists(jsonDictionary).request else {
            completion(NSError(domain: "Invalid Request", code: -666, userInfo: nil), nil)
            return
        }
        //Setup Session
        
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            guard let data = data, error == nil else {
                completion(error, nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 201 {
                completion(NSError(domain: "Wrong HHTP status", code: httpStatus.statusCode, userInfo: nil), nil)
                return
            }
            
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) as! [String : Any] {
                if let htmlURL = json["html_url"] as? String {
                    completion(nil, htmlURL)
                }
            }
        }
        
        task.resume()
    }
    
    
    
    /**
    //Not implemented yet
    
    func base64Login() -> String {
        let username = "XXX"
        let password = "XXX"
        let loginString = "\(username):\(password)"
        let loginData = loginString.data(using: String.Encoding.utf8)!
        let base64LoginString = loginData.base64EncodedString()
        
        return base64LoginString
    }
    
    
    func authenticate () {
        let scopes = ["gist"]
        let params  = ["client_secret" : GitHubCredential.clientSecret.rawValue,
                       "scopes" : scopes,
                       "note" : "testNote"] as [String : Any]
        
        var request = GitHubRouter.auth(params).request
        request.setValue("Basic \(base64Login())", forHTTPHeaderField: "Authorization")
        

        //Setup Session
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            guard let responseData = data,
                error == nil,
                let jsonObject = try? JSONSerialization.jsonObject(with: responseData, options: []) else {
                    print("Error \(String(describing: error))")
                    return
            }
            
            if let json = jsonObject as? [String : Any] {
                print(json)
            }
        }
        
        task.resume()
        
    }
**/
}
